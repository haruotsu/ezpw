name: Go CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

permissions:
  contents: read
  pull-requests: write

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Run go fmt
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "gofmt check failed:"
            gofmt -s -l .
            exit 1
          fi

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.23", "1.24"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Install Playwright dependencies
        run: |
          npm install -g playwright
          playwright install --with-deps chromium

      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.go-version }}
          path: |
            coverage.out
            coverage.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-go-${{ matrix.go-version }}
          fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [ lint, test ]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Build binary
        run: |
          go build -ldflags="-X main.Version=dev" -v -o ezpw cmd/ezpw/main.go

      - name: Test binary
        run: |
          ./ezpw version
          ./ezpw --help

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ezpw-binary
          path: ezpw

  create-tag-and-release:
    name: Create Tag and Release
    runs-on: ubuntu-latest
    needs: [ build ]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: main
          default_bump: patch
          tag_prefix: v

      - name: Set up Go
        if: steps.tag_version.outputs.new_tag != ''
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
          cache: true

      - name: Install dependencies
        if: steps.tag_version.outputs.new_tag != ''
        run: go mod download

      - name: Build binaries
        if: steps.tag_version.outputs.new_tag != ''
        run: |
          VERSION=${{ steps.tag_version.outputs.new_tag }}
          GOOS=linux GOARCH=amd64 go build -ldflags="-X main.Version=${VERSION}" -o ezpw-linux-amd64 cmd/ezpw/main.go
          GOOS=darwin GOARCH=amd64 go build -ldflags="-X main.Version=${VERSION}" -o ezpw-darwin-amd64 cmd/ezpw/main.go
          GOOS=darwin GOARCH=arm64 go build -ldflags="-X main.Version=${VERSION}" -o ezpw-darwin-arm64 cmd/ezpw/main.go
          GOOS=windows GOARCH=amd64 go build -ldflags="-X main.Version=${VERSION}" -o ezpw-windows-amd64.exe cmd/ezpw/main.go

      - name: Create GitHub Release
        if: steps.tag_version.outputs.new_tag != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
          files: |
            ezpw-linux-amd64
            ezpw-darwin-amd64
            ezpw-darwin-arm64
            ezpw-windows-amd64.exe
          draft: false
          prerelease: false

      - name: Set up Docker Buildx
        if: steps.tag_version.outputs.new_tag != ''
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: steps.tag_version.outputs.new_tag != ''
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        if: steps.tag_version.outputs.new_tag != ''
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ steps.tag_version.outputs.new_tag }}
          build-args: |
            VERSION=${{ steps.tag_version.outputs.new_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max